{#
    Displays title and search form
    @TODO move search form to separated macro
#}
{% macro renderTitleAndSearch(pageTitle, buttons) %}
    <div class="container-fluid search-header clearfix">
        <h1>
            <span class="pull-left">
                {{ pageTitle|trans }}
            </span>
            <form class="form-inline search-form configuration-search-form">
                <input type="text" id="search" class="span2 search" name="search" value="Find an Option">
                <button type="submit" class="btn btn-search btn-primary">{{ 'Find'|trans }}</button>
            </form>
            <div class="pull-right">
                {% if buttons is defined %}
                    {% for button in buttons %}
                        {{ button }}
                    {% endfor %}
                {% endif %}
            </div>
        </h1>
    </div>
{% endmacro %}

{#
    Render page scrollable data
    params:
        data        - array of horizontal tabs
        activeTab   - active tab name
        activeVTab  - active vertical tab name
#}
{%  macro renderScrollData(data, activeTab = false, activeVTab = false) %}
    {% import _self as __ %}
    <div class="tabbable system-configuration-container">
        <div class="container-fluid">
            <ul class="nav nav-tabs">
                {% if data is iterable %}
                    {% for tab in data %}
                        {% set tab = tab|merge({
                                isActive: activeTab and activeTab == tab.name,
                                url: path('oro_config_configuration_system', {activeGroup: tab.name})
                            })
                        %}

                        {% if (tab.isActive) %}
                            {% set activeTab = tab %}
                        {% endif %}
                        {{ __.renderTabNavItem(tab, true) }}
                    {% endfor %}
                {% endif %}
            </ul>
        </div>
        <div class="scrollable-container">
            <div class="container-fluid">
                <div class="usser-row">
                    <div class="row-fluid row-fluid-divider tab-content">
                        {% if activeVTab %}
                            {{ __.renderVerticalSubmenu(activeTab, activeVTab) }}
                            {{ __.renderTab(activeVTab) }}
                        {% endif %}
                    </div>
                </div>
            </div>
        </div>
    </div>
{% endmacro %}

{#
    Renders tab navigation item
    params:
        data.isActive    - Tab is active
        data.name        - Tab name
        data.title       - Tab title
        data.icon        - Tab icon
        data.url         - Tab view url
#}
{% macro renderTabNavItem(data) %}
    <li {% if data.isActive %}class="active"{% endif %}>
        <a href="{% if data.isActive %}javascript:void(0);{% else %}{{ data.url }}{% endif %}">
            {% if data.icon is defined and data.icon != '' %}<i class="icon {{ data.icon }}"></i>{% endif %}
            {{ data.title|trans }}
        </a>
    </li>
{% endmacro %}

{#
    Renders submenu
    params:
        data.children             - Submenu groups
        data.children[].title     - Group title
        data.children[].children  - Vertical menu items
#}
{% macro renderVerticalSubmenu(data, activeVTab= '') %}
    {% import _self as __ %}
    <div class="span2 system-configuration-sidebar">
        {% if data.children is defined and data.children is iterable %}
            {% for group in data.children %}
                <dl>
                    <dt>
                        <h4>{{ group.title|trans }}</h4>
                    </dt>
                    <dd>
                        {% if group.children is defined and group.children is iterable %}
                            <ul class="nav nav-pills nav-stacked">
                                {% for tab in group.children %}
                                    {% set tab = tab|merge({
                                            isActive: activeVTab != '' and activeVTab == tab.name,
                                            url: path('oro_config_configuration_system', {activeGroup: data.name, activeSubGroup: tab.name })
                                        })
                                    %}
                                    {{ __.renderTabNavItem(tab) }}
                                {% endfor %}
                            </ul>
                        {% endif %}
                    </dd>
                </dl>
            {% endfor %}
        {% endif %}
    </div>
{% endmacro %}

{#
    Renders tab content by name
#}
{% macro renderTab(name) %}
    {{ render(path('oro_config_configuration_rendergroup', {groupName: name})) }}
{% endmacro %}

{#
    Renders fieldset
    params:
        data.title       - fieldset label
        data.description - fieldset description
        data.data        - fields data
#}
{% macro renderFiedset(data) %}
    {% import _self as __ %}
    <fieldset class="form-horizontal">
        <h5 class="usser-fiedset">
            <span>{{ data.title|trans }}</span>
        </h5>

        {% if data.description is defined %}
            <p>{{ data.description }}</p>
        {% endif %}

        {% for dataBlock in data.data %}
            {{ dataBlock|raw }}
        {% endfor %}
    </fieldset>
{% endmacro %}
